apply plugin: 'java'
apply plugin: 'eclipse'


group = 'lyra'
//sourceCompatibility = 1.5
version = '1.0-SNAPSHOT'

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version,
		           'Main-Class': 'lyra.Frontend'
    }
	from {configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

/* Gradle has an ANTLR plugin but it's docs didn't help me. 
 * Following this [example](https://gist.github.com/darylteo/8255043), 
 * this script make ANTLR tool a dependency and uses the downloaded jar to
 * generate the Parser and Lexer */ 

configurations {
	/* Not really sure what is going on here, but this is what allows antlr
	 * on dependencies{} and classpath = configurations.antlr */
	antlr
	compile.extendsFrom antlr
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile 'org.antlr:antlr4-runtime:4.5'
	compile 'args4j:args4j:2.32'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    antlr 'org.antlr:antlr4:4.5'
}

test {
    systemProperties 'property': 'value'
	outputs.upToDateWhen {false}
}

/* Files generated by ANTLR get into a sourceSet in src/parser. It looks like
 * .tokens files are needed on runtime, so they will be made resources. */
def antlrDestDir = 'src/parser/java/lyra/'
def antlrResourcesDir = 'src/parser/resources/lyra'

sourceSets {
	main {
		java { srcDir antlrDestDir }
		resources { srcDir antlrResourcesDir }
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.2'
	/* SSL certificate is fucked up, see http://discuss.gradle.org/t/urgent-ssl-apache-configuration-for-services-gradle-org-is-bad/8808 */
	distributionUrl = 'http://services.gradle.org/distributions/gradle-2.2-bin.zip'
	
}

task generateParser(type: JavaExec) {
	def outputDir = "$buildDir/antlr"
	def antlrFiles = fileTree('src/main/antlr').include('**/*.g4');
	inputs.files antlrFiles;
	outputs.dir outputDir

	outputs.upToDateWhen {false}
	
	workingDir = 'src/main/antlr'
	classpath = configurations.antlr
	
	args += [
		'-o',
		outputDir,
		'-visitor',
		'-listener',
		'-package',
		'lyra'
	]
	args += antlrFiles
	main = 'org.antlr.v4.Tool' 
}

task copyGeneratedParser(type: Sync, dependsOn: generateParser) {
	from generateParser
	into antlrDestDir 
	include '**/*.java'
	outputs.upToDateWhen {false}
}
task copyGeneratedTokens(type: Sync, dependsOn: generateParser) {
	from generateParser
	into antlrResourcesDir 
	include '**/*.tokens'
	outputs.upToDateWhen {false}
}

compileJava.dependsOn copyGeneratedParser, copyGeneratedTokens


//uploadArchives {
//    repositories {
//       flatDir {
//           dirs 'repos'
//       }
//    }
//}
